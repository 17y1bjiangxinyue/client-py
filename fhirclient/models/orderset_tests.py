#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 1.4.0.8139 on 2016-04-01.
#  2016, SMART Health IT.


import os
import io
import unittest
import json
from . import orderset
from .fhirdate import FHIRDate


class OrderSetTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("OrderSet", js["resourceType"])
        return orderset.OrderSet(js)
    
    def testOrderSet1(self):
        inst = self.instantiate_from("orderset-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a OrderSet instance")
        self.implOrderSet1(inst)
        
        js = inst.as_json()
        self.assertEqual("OrderSet", js["resourceType"])
        inst2 = orderset.OrderSet(js)
        self.implOrderSet1(inst2)
    
    def implOrderSet1(self, inst):
        self.assertEqual(inst.action[0].action[0].action[0].customization[0].expression, "ReferralRequestFulfillmentTime")
        self.assertEqual(inst.action[0].action[0].action[0].customization[0].path, "fulfillmentTime")
        self.assertEqual(inst.action[0].action[0].action[0].customization[1].expression, "Patient")
        self.assertEqual(inst.action[0].action[0].action[0].customization[1].path, "patient")
        self.assertEqual(inst.action[0].action[0].action[0].customization[2].expression, "Practitioner")
        self.assertEqual(inst.action[0].action[0].action[0].customization[2].path, "requester")
        self.assertEqual(inst.action[0].action[0].action[0].customization[3].expression, "RiskAssessmentScore")
        self.assertEqual(inst.action[0].action[0].action[0].customization[3].path, "reason")
        self.assertEqual(inst.action[0].action[0].action[0].customization[4].expression, "RiskAssessment")
        self.assertEqual(inst.action[0].action[0].action[0].customization[4].path, "supportingInformation")
        self.assertEqual(inst.action[0].action[0].action[0].textEquivalent, "Refer to outpatient mental health program for evaluation and treatment of mental health conditions now")
        self.assertEqual(inst.action[0].action[0].behavior[0].type.code, "grouping-behavior")
        self.assertEqual(inst.action[0].action[0].behavior[0].value.code, "logical-group")
        self.assertEqual(inst.action[0].action[0].behavior[1].type.code, "selection-behavior")
        self.assertEqual(inst.action[0].action[0].behavior[1].value.code, "any")
        self.assertEqual(inst.action[0].action[0].title, "Consults and Referrals")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].textEquivalent, "citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[1].textEquivalent, "escitalopram 10 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[2].textEquivalent, "fluoxetine 20 mg capsule 1 capsule oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[3].textEquivalent, "paroxetine 20 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[4].textEquivalent, "sertraline 50 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].behavior[0].type.code, "grouping-behavior")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].behavior[0].value.code, "logical-group")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].behavior[1].type.code, "selection-behavior")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].behavior[1].value.code, "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].contentType, "text/html")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].title, "National Library of Medicine. DailyMed website. CITALOPRAM- citalopram hydrobromide tablet, film coated.")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].url, "http://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=6daeb45c-451d-b135-bf8f-2d6dff4b6b01")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].title, "Selective Serotonin Reuptake Inhibitors (Choose a mazimum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[1].textEquivalent, "Dopamine Norepinephrine Reuptake Inhibitors (Choose a maximum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[2].textEquivalent, "Serotonin Norepinephrine Reuptake Inhibitors (Choose a maximum of one or doument reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[3].textEquivalent, "Norepinephrine-Serotonin Modulators (Choose a maximum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].behavior[0].type.code, "grouping-behavior")
        self.assertEqual(inst.action[0].action[1].action[0].behavior[0].value.code, "logical-group")
        self.assertEqual(inst.action[0].action[1].action[0].behavior[1].type.code, "selection-behavior")
        self.assertEqual(inst.action[0].action[1].action[0].behavior[1].value.code, "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[0].supportingEvidence[0].contentType, "text/html")
        self.assertEqual(inst.action[0].action[1].action[0].supportingEvidence[0].title, "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.action[0].action[1].action[0].supportingEvidence[0].url, "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.action[0].action[1].action[0].title, "First-Line Antidepressants")
        self.assertEqual(inst.action[0].action[1].behavior[0].type.code, "grouping-behavior")
        self.assertEqual(inst.action[0].action[1].behavior[0].value.code, "logical-group")
        self.assertEqual(inst.action[0].action[1].behavior[1].type.code, "selection-behavior")
        self.assertEqual(inst.action[0].action[1].behavior[1].value.code, "at-most-one")
        self.assertEqual(inst.action[0].action[1].title, "Medications")
        self.assertEqual(inst.action[0].title, "Suicide Risk Assessment and Outpatient Management")
        self.assertEqual(inst.contained[0].id, "referralRequest")
        self.assertEqual(inst.contained[1].id, "citalopramPrescription")
        self.assertEqual(inst.contained[2].id, "citalopramMedication")
        self.assertEqual(inst.contained[3].id, "citalopramSubstance")
        self.assertEqual(inst.id, "example")
        self.assertEqual(inst.moduleMetadata.contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.moduleMetadata.contact[0].telecom[0].use, "work")
        self.assertEqual(inst.moduleMetadata.contact[0].telecom[0].value, "415-362-4007")
        self.assertEqual(inst.moduleMetadata.contact[0].telecom[1].system, "email")
        self.assertEqual(inst.moduleMetadata.contact[0].telecom[1].use, "work")
        self.assertEqual(inst.moduleMetadata.contact[0].telecom[1].value, "info@motivemi.com")
        self.assertEqual(inst.moduleMetadata.contributor[0].contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.moduleMetadata.contributor[0].contact[0].telecom[0].use, "work")
        self.assertEqual(inst.moduleMetadata.contributor[0].contact[0].telecom[0].value, "415-362-4007")
        self.assertEqual(inst.moduleMetadata.contributor[0].contact[0].telecom[1].system, "email")
        self.assertEqual(inst.moduleMetadata.contributor[0].contact[0].telecom[1].use, "work")
        self.assertEqual(inst.moduleMetadata.contributor[0].contact[0].telecom[1].value, "info@motivemi.com")
        self.assertEqual(inst.moduleMetadata.contributor[0].name, "Motive Medical Intelligence")
        self.assertEqual(inst.moduleMetadata.contributor[0].type, "author")
        self.assertEqual(inst.moduleMetadata.coverage[0].focus.code, "patient-age-group")
        self.assertEqual(inst.moduleMetadata.coverage[0].value.coding[0].code, "133936004")
        self.assertEqual(inst.moduleMetadata.coverage[0].value.coding[0].display, "Adult")
        self.assertEqual(inst.moduleMetadata.coverage[1].focus.code, "clinical-focus")
        self.assertEqual(inst.moduleMetadata.coverage[1].value.coding[0].code, "87512008")
        self.assertEqual(inst.moduleMetadata.coverage[1].value.coding[0].display, "Mild major depression")
        self.assertEqual(inst.moduleMetadata.coverage[2].focus.code, "clinical-focus")
        self.assertEqual(inst.moduleMetadata.coverage[2].value.coding[0].code, "40379007")
        self.assertEqual(inst.moduleMetadata.coverage[2].value.coding[0].display, "Major depression, recurrent, mild")
        self.assertEqual(inst.moduleMetadata.coverage[3].focus.code, "clinical-focus")
        self.assertEqual(inst.moduleMetadata.coverage[3].value.coding[0].code, "394687007")
        self.assertEqual(inst.moduleMetadata.coverage[3].value.coding[0].display, "Low suicide risk")
        self.assertEqual(inst.moduleMetadata.coverage[4].focus.code, "clinical-focus")
        self.assertEqual(inst.moduleMetadata.coverage[4].value.coding[0].code, "225337009")
        self.assertEqual(inst.moduleMetadata.coverage[4].value.coding[0].display, "Suicide risk assessment")
        self.assertEqual(inst.moduleMetadata.coverage[5].focus.code, "clinical-venue")
        self.assertEqual(inst.moduleMetadata.coverage[5].value.coding[0].code, "440655000")
        self.assertEqual(inst.moduleMetadata.coverage[5].value.coding[0].display, "Outpatient environment")
        self.assertEqual(inst.moduleMetadata.coverage[6].focus.code, "target-user")
        self.assertEqual(inst.moduleMetadata.coverage[6].value.coding[0].code, "309343006")
        self.assertEqual(inst.moduleMetadata.coverage[6].value.coding[0].display, "Physician")
        self.assertEqual(inst.moduleMetadata.description, "...")
        self.assertEqual(inst.moduleMetadata.identifier[0].use, "official")
        self.assertEqual(inst.moduleMetadata.identifier[0].value, "mmi:low-suicide-risk-order-set")
        self.assertEqual(inst.moduleMetadata.publicationDate.date, FHIRDate("2015-08-15").date)
        self.assertEqual(inst.moduleMetadata.publicationDate.as_json(), "2015-08-15")
        self.assertEqual(inst.moduleMetadata.publisher, "Motive Medical Intelligence")
        self.assertEqual(inst.moduleMetadata.status, "draft")
        self.assertEqual(inst.moduleMetadata.title, "Low Suicide Risk Order Set")
        self.assertEqual(inst.moduleMetadata.topic[0].text, "Chlamydia Screeening")
        self.assertEqual(inst.moduleMetadata.type, "order-set")
        self.assertEqual(inst.moduleMetadata.version, "1.0.0")
        self.assertEqual(inst.text.div, "<div>Low Suicide Risk Order Set...</div>")
        self.assertEqual(inst.text.status, "generated")

