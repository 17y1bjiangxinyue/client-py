#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 1.4.0.8595 on 2016-06-26.
#  2016, SMART Health IT.


import os
import io
import unittest
import json
from . import protocol
from .fhirdate import FHIRDate


class ProtocolTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Protocol", js["resourceType"])
        return protocol.Protocol(js)
    
    def testProtocol1(self):
        inst = self.instantiate_from("protocol-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Protocol instance")
        self.implProtocol1(inst)
        
        js = inst.as_json()
        self.assertEqual("Protocol", js["resourceType"])
        inst2 = protocol.Protocol(js)
        self.implProtocol1(inst2)
    
    def implProtocol1(self, inst):
        self.assertEqual(inst.id, "example")
        self.assertEqual(inst.identifier[0].system, "http://acme.org")
        self.assertEqual(inst.identifier[0].value, "example-1")
        self.assertEqual(inst.purpose, "Example of A medical algorithm for assessment and treatment of overweight and obesity")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.step[0].activity[0].detail.category, "procedure")
        self.assertEqual(inst.step[0].activity[0].detail.code.coding[0].code, "39156-5")
        self.assertEqual(inst.step[0].activity[0].detail.code.coding[0].display, "Body mass index (BMI) [Ratio]")
        self.assertEqual(inst.step[0].activity[0].detail.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.step[0].activity[0].detail.description, "Extra information on activity ")
        self.assertEqual(inst.step[0].name, "Measure BMI")
        self.assertEqual(inst.step[0].precondition.union[0].condition.type.coding[0].code, "1234")
        self.assertEqual(inst.step[0].precondition.union[0].condition.type.coding[0].display, "Obesity")
        self.assertEqual(inst.step[0].precondition.union[0].condition.type.coding[0].system, "http://acme.org")
        self.assertTrue(inst.step[0].precondition.union[0].condition.valueBoolean)
        self.assertEqual(inst.step[0].precondition.union[1].condition.type.text, "BMI in last 2 years")
        self.assertFalse(inst.step[0].precondition.union[1].condition.valueBoolean)
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "Obesity Assessment Protocol")
        self.assertEqual(inst.type, "condition")
    
    def testProtocol2(self):
        inst = self.instantiate_from("protocol-study-profile-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Protocol instance")
        self.implProtocol2(inst)
        
        js = inst.as_json()
        self.assertEqual("Protocol", js["resourceType"])
        inst2 = protocol.Protocol(js)
        self.implProtocol2(inst2)
    
    def implProtocol2(self, inst):
        self.assertEqual(inst.extension[0].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#arm.name")
        self.assertEqual(inst.extension[0].extension[0].valueString, "0.5 mg Dose")
        self.assertEqual(inst.extension[0].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#arm.description")
        self.assertEqual(inst.extension[0].extension[1].valueString, "Administering 0.5mg of [Drug A]")
        self.assertEqual(inst.extension[0].id, "arm-dose1")
        self.assertEqual(inst.extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#arm")
        self.assertEqual(inst.extension[1].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#arm.name")
        self.assertEqual(inst.extension[1].extension[0].valueString, "dose2")
        self.assertEqual(inst.extension[1].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#arm.description")
        self.assertEqual(inst.extension[1].extension[1].valueString, "Administering 1.0mg of [Drug A]")
        self.assertEqual(inst.extension[1].id, "arm-dose2")
        self.assertEqual(inst.extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#arm")
        self.assertEqual(inst.extension[2].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#epoch.name")
        self.assertEqual(inst.extension[2].extension[0].valueString, "Screening")
        self.assertEqual(inst.extension[2].id, "epoch-screening")
        self.assertEqual(inst.extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#epoch")
        self.assertEqual(inst.extension[3].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#epoch.name")
        self.assertEqual(inst.extension[3].extension[0].valueString, "Single blind run-in")
        self.assertEqual(inst.extension[3].id, "epoch-single-blind-run-in")
        self.assertEqual(inst.extension[3].url, "http://example.org/example-do-not-use/Profilestudyprotocol#epoch")
        self.assertEqual(inst.extension[4].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#epoch.name")
        self.assertEqual(inst.extension[4].extension[0].valueString, "Treatment")
        self.assertEqual(inst.extension[4].id, "epoch-treatment-phase")
        self.assertEqual(inst.extension[4].url, "http://example.org/example-do-not-use/Profilestudyprotocol#epoch")
        self.assertEqual(inst.extension[5].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#epoch.name")
        self.assertEqual(inst.extension[5].extension[0].valueString, "Follow up")
        self.assertEqual(inst.extension[5].id, "epoch-follow-up")
        self.assertEqual(inst.extension[5].url, "http://example.org/example-do-not-use/Profilestudyprotocol#epoch")
        self.assertEqual(inst.id, "study")
        self.assertEqual(inst.purpose, "Defines the execution of study AD-4833PNFP-341")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.step[0].description, "Screen")
        self.assertEqual(inst.step[0].exit.description, "Screening assessments complete")
        self.assertEqual(inst.step[0].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.arm")
        self.assertEqual(inst.step[0].extension[0].valueUri, "#arm-dose1")
        self.assertEqual(inst.step[0].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.epoch")
        self.assertEqual(inst.step[0].extension[1].valueUri, "#epoch-screening")
        self.assertEqual(inst.step[0].extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[0].extension[2].valueInteger, 1)
        self.assertEqual(inst.step[0].name, "SCRN")
        self.assertEqual(inst.step[0].precondition.description, "Informed Consent")
        self.assertEqual(inst.step[1].description, "Single Blind Run-In")
        self.assertEqual(inst.step[1].duration.code, "wk")
        self.assertEqual(inst.step[1].duration.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.step[1].duration.value, 1)
        self.assertEqual(inst.step[1].exit.description, "1 week after start of Element")
        self.assertEqual(inst.step[1].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.arm")
        self.assertEqual(inst.step[1].extension[0].valueUri, "#arm-dose1")
        self.assertEqual(inst.step[1].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.epoch")
        self.assertEqual(inst.step[1].extension[1].valueUri, "#epoch-single-blind-run-in")
        self.assertEqual(inst.step[1].extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[1].extension[2].valueInteger, 2)
        self.assertEqual(inst.step[1].extension[3].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armAssignment")
        self.assertEqual(inst.step[1].extension[3].valueString, "Randomized to Dose 1")
        self.assertEqual(inst.step[1].name, "SBRI")
        self.assertEqual(inst.step[1].precondition.description, "Initial Single Blind Placebo dose")
        self.assertEqual(inst.step[2].description, "Administer 0.5mg [Drug A] QD")
        self.assertEqual(inst.step[2].duration.code, "wk")
        self.assertEqual(inst.step[2].duration.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.step[2].duration.value, 30)
        self.assertEqual(inst.step[2].exit.description, "30 weeks after start of Element")
        self.assertEqual(inst.step[2].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.arm")
        self.assertEqual(inst.step[2].extension[0].valueUri, "#arm-dose1")
        self.assertEqual(inst.step[2].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.epoch")
        self.assertEqual(inst.step[2].extension[1].valueUri, "#epoch-treatment-phase")
        self.assertEqual(inst.step[2].extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[2].extension[2].valueInteger, 3)
        self.assertEqual(inst.step[2].name, "DOSE 1")
        self.assertEqual(inst.step[2].precondition.description, "First dose of treatment where total drug dose of [Drug A] per day is 0.5 mg.")
        self.assertEqual(inst.step[3].description, "Follow-Up")
        self.assertEqual(inst.step[3].exit.description, "2 weeks after start of Element")
        self.assertEqual(inst.step[3].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.arm")
        self.assertEqual(inst.step[3].extension[0].valueUri, "#arm-dose1")
        self.assertEqual(inst.step[3].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.epoch")
        self.assertEqual(inst.step[3].extension[1].valueUri, "#epoch-follow-up")
        self.assertEqual(inst.step[3].extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[3].extension[2].valueInteger, 4)
        self.assertEqual(inst.step[3].name, "FLWUP")
        self.assertEqual(inst.step[3].precondition.description, "Last dose of treatment")
        self.assertEqual(inst.step[4].description, "Screen")
        self.assertEqual(inst.step[4].exit.description, "Screening assessments complete")
        self.assertEqual(inst.step[4].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.arm")
        self.assertEqual(inst.step[4].extension[0].valueUri, "#arm-dose2")
        self.assertEqual(inst.step[4].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.epoch")
        self.assertEqual(inst.step[4].extension[1].valueUri, "#epoch-screening")
        self.assertEqual(inst.step[4].extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[4].extension[2].valueInteger, 1)
        self.assertEqual(inst.step[4].name, "SCRN")
        self.assertEqual(inst.step[4].precondition.description, "Informed Consent")
        self.assertEqual(inst.step[5].description, "Single Blind Run-In")
        self.assertEqual(inst.step[5].duration.code, "wk")
        self.assertEqual(inst.step[5].duration.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.step[5].duration.value, 1)
        self.assertEqual(inst.step[5].exit.description, "1 week after start of Element")
        self.assertEqual(inst.step[5].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.arm")
        self.assertEqual(inst.step[5].extension[0].valueUri, "#arm-dose2")
        self.assertEqual(inst.step[5].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.epoch")
        self.assertEqual(inst.step[5].extension[1].valueUri, "#epoch-single-blind-run-in")
        self.assertEqual(inst.step[5].extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[5].extension[2].valueInteger, 2)
        self.assertEqual(inst.step[5].extension[3].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armAssignment")
        self.assertEqual(inst.step[5].extension[3].valueString, "Randomized to 1.0 mg")
        self.assertEqual(inst.step[5].name, "SBRI")
        self.assertEqual(inst.step[5].precondition.description, "First dose of Single Blind Placebo")
        self.assertEqual(inst.step[6].description, "Administer 1.0 mg [Drug A] QD")
        self.assertEqual(inst.step[6].duration.code, "wk")
        self.assertEqual(inst.step[6].duration.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.step[6].duration.value, 30)
        self.assertEqual(inst.step[6].exit.description, "30 weeks after start of Element")
        self.assertEqual(inst.step[6].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.arm")
        self.assertEqual(inst.step[6].extension[0].valueUri, "#arm-dose2")
        self.assertEqual(inst.step[6].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.epoch")
        self.assertEqual(inst.step[6].extension[1].valueUri, "#epoch-treatment-phase")
        self.assertEqual(inst.step[6].extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[6].extension[2].valueInteger, 3)
        self.assertEqual(inst.step[6].name, "1.0 mg Dose")
        self.assertEqual(inst.step[6].precondition.description, "Intial dose of treatment where total drug dose of [Drug A] per day is 1.0 mg.")
        self.assertEqual(inst.step[7].description, "Follow-Up")
        self.assertEqual(inst.step[7].exit.description, "2 weeks after start of Element")
        self.assertEqual(inst.step[7].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.arm")
        self.assertEqual(inst.step[7].extension[0].valueUri, "#arm-pio45mgs")
        self.assertEqual(inst.step[7].extension[1].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.epoch")
        self.assertEqual(inst.step[7].extension[1].valueUri, "#epoch-follow-up")
        self.assertEqual(inst.step[7].extension[2].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[7].extension[2].valueInteger, 4)
        self.assertEqual(inst.step[7].name, "FLWUP")
        self.assertEqual(inst.step[7].precondition.description, "Last dose of treatment")
        self.assertEqual(inst.step[8].activity[0].detail.category, "encounter")
        self.assertEqual(inst.step[8].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[8].extension[0].valueInteger, 1)
        self.assertEqual(inst.step[8].name, "VISIT 1")
        self.assertEqual(inst.step[8].precondition.description, "Screening")
        self.assertEqual(inst.step[9].activity[0].detail.category, "encounter")
        self.assertEqual(inst.step[9].extension[0].url, "http://example.org/example-do-not-use/Profilestudyprotocol#step.armSequence")
        self.assertEqual(inst.step[9].extension[0].valueInteger, 2)
        self.assertEqual(inst.step[9].name, "VISIT 2")
        self.assertEqual(inst.step[9].precondition.description, "single-blind placebo start")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.type, "study")

