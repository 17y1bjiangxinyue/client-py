#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 1.7.0.10061 on 2016-10-24.
#  2016, SMART Health IT.


import os
import io
import unittest
import json
from . import plandefinition
from .fhirdate import FHIRDate


class PlanDefinitionTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("PlanDefinition", js["resourceType"])
        return plandefinition.PlanDefinition(js)
    
    def testPlanDefinition1(self):
        inst = self.instantiate_from("plandefinition-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a PlanDefinition instance")
        self.implPlanDefinition1(inst)
        
        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition1(inst2)
    
    def implPlanDefinition1(self, inst):
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[0].expression, "Now()")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[0].path, "timing.event")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[1].expression, "Code '261QM0850X' from \"urn:oid:2.16.840.1.113883.11.19462\"")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[1].path, "specialty")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[2].expression, "ReferralRequestFulfillmentTime")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[2].path, "fulfillmentTime")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[3].expression, "Patient")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[3].path, "patient")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[4].expression, "Practitioner")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[4].path, "requester")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[5].expression, "RiskAssessmentScore")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[5].path, "reason")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[6].expression, "RiskAssessment")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[6].path, "supportingInformation")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].actionDefinition[0].textEquivalent, "Refer to outpatient mental health program for evaluation and treatment of mental health conditions now")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].groupingBehavior, "logical-group")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].selectionBehavior, "any")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[0].title, "Consults and Referrals")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[0].expression, "'draft'")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[0].path, "status")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[1].expression, "Patient")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[1].path, "patient")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[2].expression, "Practitioner")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[2].path, "prescriber")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[3].expression, "RiskAssessmentScore")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[3].path, "reasonCode")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[4].expression, "RiskAssessment")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].dynamicValue[4].path, "reasonReference")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[0].textEquivalent, "citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[1].textEquivalent, "escitalopram 10 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[2].textEquivalent, "fluoxetine 20 mg capsule 1 capsule oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[3].textEquivalent, "paroxetine 20 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].actionDefinition[4].textEquivalent, "sertraline 50 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].documentation[0].document.contentType, "text/html")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].documentation[0].document.title, "National Library of Medicine. DailyMed website. CITALOPRAM- citalopram hydrobromide tablet, film coated.")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].documentation[0].document.url, "http://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=6daeb45c-451d-b135-bf8f-2d6dff4b6b01")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].documentation[0].type, "justification")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].groupingBehavior, "logical-group")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].selectionBehavior, "at-most-one")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[0].title, "Selective Serotonin Reuptake Inhibitors (Choose a mazimum of one or document reasons for exception)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[1].textEquivalent, "Dopamine Norepinephrine Reuptake Inhibitors (Choose a maximum of one or document reasons for exception)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[2].textEquivalent, "Serotonin Norepinephrine Reuptake Inhibitors (Choose a maximum of one or doument reasons for exception)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].actionDefinition[3].textEquivalent, "Norepinephrine-Serotonin Modulators (Choose a maximum of one or document reasons for exception)")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].documentation[0].document.contentType, "text/html")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].documentation[0].document.title, "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].documentation[0].document.url, "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].documentation[0].type, "justification")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].groupingBehavior, "logical-group")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].selectionBehavior, "at-most-one")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].actionDefinition[0].title, "First-Line Antidepressants")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].groupingBehavior, "logical-group")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].selectionBehavior, "at-most-one")
        self.assertEqual(inst.actionDefinition[0].actionDefinition[1].title, "Medications")
        self.assertEqual(inst.actionDefinition[0].title, "Suicide Risk Assessment and Outpatient Management")
        self.assertEqual(inst.contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.contact[0].telecom[0].use, "work")
        self.assertEqual(inst.contact[0].telecom[0].value, "415-362-4007")
        self.assertEqual(inst.contact[0].telecom[1].system, "email")
        self.assertEqual(inst.contact[0].telecom[1].use, "work")
        self.assertEqual(inst.contact[0].telecom[1].value, "info@motivemi.com")
        self.assertEqual(inst.contained[0].id, "referralToMentalHealthCare")
        self.assertEqual(inst.contained[1].id, "citalopramPrescription")
        self.assertEqual(inst.contained[2].id, "citalopramMedication")
        self.assertEqual(inst.contained[3].id, "citalopramSubstance")
        self.assertEqual(inst.contributor[0].contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.contributor[0].contact[0].telecom[0].use, "work")
        self.assertEqual(inst.contributor[0].contact[0].telecom[0].value, "415-362-4007")
        self.assertEqual(inst.contributor[0].contact[0].telecom[1].system, "email")
        self.assertEqual(inst.contributor[0].contact[0].telecom[1].use, "work")
        self.assertEqual(inst.contributor[0].contact[0].telecom[1].value, "info@motivemi.com")
        self.assertEqual(inst.contributor[0].name, "Motive Medical Intelligence")
        self.assertEqual(inst.contributor[0].type, "author")
        self.assertEqual(inst.date.date, FHIRDate("2015-08-15").date)
        self.assertEqual(inst.date.as_json(), "2015-08-15")
        self.assertEqual(inst.description, "...")
        self.assertEqual(inst.id, "example")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "mmi:low-suicide-risk-order-set")
        self.assertEqual(inst.publisher, "Motive Medical Intelligence")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.text.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">Low Suicide Risk Order Set...</div>")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "Low Suicide Risk Order Set")
        self.assertEqual(inst.topic[0].text, "Suicide risk assessment")
        self.assertEqual(inst.useContext[0].code.code, "gender")
        self.assertEqual(inst.useContext[0].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, "133936004")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, "Adult")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[1].code.code, "focus")
        self.assertEqual(inst.useContext[1].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code, "87512008")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display, "Mild major depression")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[2].code.code, "focus")
        self.assertEqual(inst.useContext[2].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code, "40379007")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display, "Major depression, recurrent, mild")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[3].code.code, "focus")
        self.assertEqual(inst.useContext[3].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code, "394687007")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display, "Low suicide risk")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[4].code.code, "focus")
        self.assertEqual(inst.useContext[4].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code, "225337009")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display, "Suicide risk assessment")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[5].code.code, "user")
        self.assertEqual(inst.useContext[5].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code, "309343006")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display, "Physician")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[6].code.code, "venue")
        self.assertEqual(inst.useContext[6].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code, "440655000")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display, "Outpatient environment")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.version, "1.0.0")
    
    def testPlanDefinition2(self):
        inst = self.instantiate_from("plandefinition-protocol-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a PlanDefinition instance")
        self.implPlanDefinition2(inst)
        
        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition2(inst2)
    
    def implPlanDefinition2(self, inst):
        self.assertEqual(inst.actionDefinition[0].condition.expression, "Observation of Obesity or BMI Measured in Past 2 Years")
        self.assertEqual(inst.actionDefinition[0].label, "Measure BMI")
        self.assertEqual(inst.actionDefinition[0].title, "Measure, Weight, Height, Waist, Circumference; Calculate BMI")
        self.assertEqual(inst.contained[0].id, "procedure")
        self.assertEqual(inst.contributor[0].name, "National Heart, Lung, and Blood Institute http://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/algorthm/algorthm.htm")
        self.assertEqual(inst.contributor[0].type, "author")
        self.assertEqual(inst.id, "protocol-example")
        self.assertEqual(inst.identifier[0].system, "http://acme.org")
        self.assertEqual(inst.identifier[0].value, "example-1")
        self.assertEqual(inst.purpose, "Example of A medical algorithm for assessment and treatment of overweight and obesity")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "Obesity Assessment Protocol")
        self.assertEqual(inst.type.coding[0].code, "protocol")

